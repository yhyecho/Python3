# 高阶函数

# 1. 变量可以指向函数

num1 = abs(-10)
print(num1)

fun = abs
print(fun)

# 可见abs(-10)是函数调用 而abs是函数本身

# 结论: 函数本身也可以赋值给变量, 即:变量可以指向函数

# 如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：

num2 = fun(-10)
print(num2)

# 成功！说明变量f现在已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同。

# 2. 函数名也是变量
# abs = 10
# abs(-10) 
# 把abs指向10后，就无法通过abs(-10)调用该函数了！因为abs这个变量已经不指向求绝对值函数而是指向一个整数10！

# 传入函数
# 既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。

def add(x, y, f):
    return f(x) + f(y)

# 当我们调用add(-5, 6, abs)时，参数x，y和f分别接收-5，6和abs，根据函数定义，我们可以推导计算过程为：

# x = -5
# y = 6
# f = abs
# f(x) + f(y) ==> abs(-5) + abs(6) ==> 11
# return 11
print(add(-5, 6, abs))
# 编写高阶函数，就是让函数的参数能够接收别的函数。

# 把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。
